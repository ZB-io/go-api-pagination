// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-api-pagination using AI Type  and AI Model 

ROOST_METHOD_HASH=listOpts_2c5f569401
ROOST_METHOD_SIG_HASH=listOpts_fe5c43e1ae

Scenario 1: Testing with nil PaginatorOpts

Details:
  Description: This test is meant to check the function's behavior when it's provided with a nil PaginatorOpts. The function is expected to return a default ListOptions object with PerPage set to 100 and Page set to 1.
Execution:
  Arrange: No setup is required as we are passing nil.
  Act: Invoke the listOpts function with nil as the parameter.
  Assert: Verify that the returned ListOptions object has PerPage set to 100 and Page set to 1.
Validation:
  The assertion is based on the function's documented behavior for nil input. This test is important to ensure that the function properly handles null input and returns a default object.

Scenario 2: Testing with PaginatorOpts having nil ListOptions

Details:
  Description: This test checks the function's behavior when the provided PaginatorOpts object has a nil ListOptions. The function is expected to return a default ListOptions object with PerPage set to 100 and Page set to 1.
Execution:
  Arrange: Create a PaginatorOpts object with nil ListOptions.
  Act: Invoke the listOpts function with the PaginatorOpts object.
  Assert: Verify that the returned ListOptions object has PerPage set to 100 and Page set to 1.
Validation:
  The assertion is based on the function's documented behavior for this scenario. This test is important to ensure that the function properly handles PaginatorOpts objects with nil ListOptions and returns a default object.

Scenario 3: Testing with PaginatorOpts having ListOptions with PerPage set to 0

Details:
  Description: This test checks the function's behavior when the provided PaginatorOpts object's ListOptions has PerPage set to 0. The function is expected to modify the PerPage to 100.
Execution:
  Arrange: Create a PaginatorOpts object with ListOptions, set PerPage to 0.
  Act: Invoke the listOpts function with the PaginatorOpts object.
  Assert: Verify that the returned ListOptions object has PerPage set to 100.
Validation:
  The assertion is based on the function's documented behavior for this scenario. This test is important to ensure that the function properly handles PaginatorOpts objects with PerPage set to 0 and modifies it to 100.

Scenario 4: Testing with valid PaginatorOpts and ListOptions

Details:
  Description: This test checks the function's behavior when the provided PaginatorOpts object's ListOptions is valid and PerPage is not 0. The function is expected to return the same ListOptions object.
Execution:
  Arrange: Create a PaginatorOpts object with valid ListOptions.
  Act: Invoke the listOpts function with the PaginatorOpts object.
  Assert: Verify that the returned ListOptions object is the same as the one provided.
Validation:
  The assertion is based on the function's documented behavior for this scenario. This test is important to ensure that the function properly handles valid PaginatorOpts objects and returns the same ListOptions.
*/

// ********RoostGPT********
package pagination

import (
	"github.com/google/go-github/v65/github"
	"testing"
)

func TestlistOpts(t *testing.T) {
	tests := []struct {
		name    string
		opts    *PaginatorOpts
		want    *github.ListOptions
	}{
		{
			name: "Testing with nil PaginatorOpts",
			opts: nil,
			want: &github.ListOptions{PerPage: 100, Page: 1},
		},
		{
			name: "Testing with PaginatorOpts having nil ListOptions",
			opts: &PaginatorOpts{nil},
			want: &github.ListOptions{PerPage: 100, Page: 1},
		},
		{
			name: "Testing with PaginatorOpts having ListOptions with PerPage set to 0",
			opts: &PaginatorOpts{&github.ListOptions{Page: 1, PerPage: 0}},
			want: &github.ListOptions{PerPage: 100, Page: 1},
		},
		{
			name: "Testing with valid PaginatorOpts and ListOptions",
			opts: &PaginatorOpts{&github.ListOptions{Page: 1, PerPage: 50}},
			want: &github.ListOptions{Page: 1, PerPage: 50},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := listOpts(tt.opts); *got != *tt.want {
				t.Errorf("listOpts() = %v, want %v", got, tt.want)
			}
		})
	}
}
